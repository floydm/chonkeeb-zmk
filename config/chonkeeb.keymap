/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        to_default {
            bindings = <&to 0>;
            key-positions = <0 1>;
        };

        tog_game {
            bindings = <&tog 3>;
            key-positions = <0 2>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <37 38>;
            layers = <0>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <38 39>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <39 40>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <40 41>;
            layers = <0>;
        };

        lboot {
            bindings = <&bootloader>;
            key-positions = <0 48>;
            layers = <0>;
        };

        rboot {
            bindings = <&bootloader>;
            key-positions = <11 59>;
            layers = <0>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <53 54>;
            layers = <0>;
        };

        lbkrt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <18 30>;
        };

        rbrkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <19 31>;
        };

        lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <16 28>;
        };

        rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <17 29>;
        };

        lessthan {
            bindings = <&kp LESS_THAN>;
            key-positions = <41 29>;
        };

        greaterthan {
            bindings = <&kp GREATER_THAN>;
            key-positions = <30 42>;
        };

        fslash {
            bindings = <&kp SLASH>;
            key-positions = <42 31>;
        };

        bslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <30 43>;
        };
    };

    behaviors {
        sft_t: sft_t {
            compatible = "zmk,behavior-hold-tap";
            label = "SFT_T";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp GRAVE       &kp N1     &kp N2     &kp N3    &kp N4             &kp N5     &kp N6     &kp N7     &kp N8     &kp N9     &kp N0         &kp EQUAL
&kp TAB         &kp Q      &kp W      &kp E     &kp R              &kp T      &kp Y      &kp U      &kp I      &kp O      &kp P          &kp MINUS
&kp ESC         &kp A      &kp S      &kp D     &kp F              &kp G      &kp H      &kp J      &kp K      &kp L      &kp SEMI       &kp SQT
&kp LBKT        &kp Z      &kp X      &kp C     &kp V              &kp B      &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH       &kp RBKT
&kp LEFT_SHIFT  &kp LMETA  &kp LCTRL  &kp LALT  &sft_t LSHFT BSPC  &kp SPACE  &lt 2 RET  &lt 1 DEL  &kp RALT   &kp RCTRL  &kp RIGHT_GUI  &kp RSHFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Lower {
            bindings = <
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans     &trans      &trans           &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans        &trans  &kp KP_N7  &kp KP_N8   &kp KP_NUMBER_9  &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans        &trans  &kp KP_N4  &kp KP_N5   &kp KP_NUMBER_6  &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans        &trans  &kp KP_N1  &kp KP_N2   &kp KP_N3        &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans        &trans  &trans     &kp KP_DOT  &kp KP_N0        &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Raise {
            bindings = <
&trans        &kp F1  &kp F2  &kp F3  &kp F4  &kp F5   &kp F6     &kp F7    &kp F8    &kp F9     &kp F10       &kp PRINTSCREEN
&trans        &trans  &trans  &trans  &trans  &kp F11  &kp F12    &kp HOME  &kp UP    &kp END    &trans        &trans
&trans        &trans  &trans  &trans  &trans  &trans   &kp PG_UP  &kp LEFT  &kp DOWN  &kp RIGHT  &kp LS(PIPE)  &trans
&trans        &trans  &trans  &trans  &trans  &trans   &kp PG_DN  &trans    &trans    &trans     &kp BSLH      &trans
&kp LS(LPAR)  &trans  &trans  &trans  &trans  &trans   &trans     &trans    &trans    &trans     &trans        &kp LS(RPAR)
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Game {
            bindings = <
&trans     &trans  &trans  &trans        &trans      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans        &trans      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans        &trans      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &trans  &trans  &trans        &trans      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&kp BSPC   &trans  &kp M   &kp LEFT_ALT  &kp LSHIFT  &kp SPACE  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
